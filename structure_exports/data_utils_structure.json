{
  "project_info": {
    "name": "data_utils",
    "path": "/Users/espensele/Desktop/Master/MasterOppg/Homomorphic-Neural-Cryptography/data_utils",
    "generated_at": "2025-01-23T15:54:29.024475",
    "total_files": 9,
    "total_size": 30324
  },
  "structure": {
    "sequential_arithmetic_operations.py": {
      "type": "file",
      "info": {
        "size": 3190,
        "last_modified": "2025-01-23T15:54:28.998689",
        "mime_type": "text/x-python",
        "extension": ".py"
      }
    },
    "plot_loss.py": {
      "type": "file",
      "info": {
        "size": 1154,
        "last_modified": "2025-01-23T15:54:29.013104",
        "mime_type": "text/x-python",
        "extension": ".py"
      }
    },
    "__pycache__": {
      "sequential_arithmetic_operations.cpython-311.pyc": {
        "type": "file",
        "info": {
          "size": 4734,
          "last_modified": "2025-01-23T15:54:29.014868",
          "mime_type": "application/octet-stream",
          "extension": ".pyc"
        }
      },
      "accuracy.cpython-311.pyc": {
        "type": "file",
        "info": {
          "size": 2621,
          "last_modified": "2025-01-23T15:54:29.016561",
          "mime_type": "application/octet-stream",
          "extension": ".pyc"
        }
      },
      "analyse_cipher.cpython-311.pyc": {
        "type": "file",
        "info": {
          "size": 4314,
          "last_modified": "2025-01-23T15:54:29.017956",
          "mime_type": "application/octet-stream",
          "extension": ".pyc"
        }
      },
      "dataset_generator.cpython-311.pyc": {
        "type": "file",
        "info": {
          "size": 6010,
          "last_modified": "2025-01-23T15:54:29.019218",
          "mime_type": "application/octet-stream",
          "extension": ".pyc"
        }
      }
    },
    "dataset_generator.py": {
      "type": "file",
      "info": {
        "size": 4116,
        "last_modified": "2025-01-23T15:54:29.020592",
        "mime_type": "text/x-python",
        "extension": ".py"
      }
    },
    "accuracy.py": {
      "type": "file",
      "info": {
        "size": 1623,
        "last_modified": "2025-01-23T15:54:29.021816",
        "mime_type": "text/x-python",
        "extension": ".py"
      }
    },
    "analyse_cipher.py": {
      "type": "file",
      "info": {
        "size": 2562,
        "last_modified": "2025-01-23T15:54:29.022998",
        "mime_type": "text/x-python",
        "extension": ".py"
      }
    }
  },
  "files": [
    {
      "path": "sequential_arithmetic_operations.py",
      "content": "from neural_network.networks import create_networks\nimport numpy as np\nfrom data_utils.accuracy import decryption_accurancy\nfrom typing import Tuple\n\n\ndef sequential_arithmetic_operations(rate: float, batch_size: int, curve: str) -> Tuple[np.float64, np.float64, np.float64, np.float64]:\n    \"\"\"\n    Test to verify that the system is a somewhat homomorphic encryption system\n\n    Args:\n        rate: The dropout rate\n        batch_size: The batch size\n        curve: The curve\n    \"\"\"\n    test_type = f\"ma-rate-{rate}-curve-{curve}\"\n\n    public_arr = np.load(f\"key/public_key-{curve}-{batch_size}.npy\")\n    private_arr = np.load(f\"key/private_key-{curve}-{batch_size}.npy\")\n\n    alice, bob, HO_model_addition, _, _, _, p1_bits, _, p2_bits, _, _, nonce_bits, HO_model_multiplication = create_networks(public_arr.shape[1], private_arr.shape[1], rate)\n\n    HO_a_weights_path = f'weights/weights-{test_type}/addition_weights.h5'\n    HO_m_weights_path = f'weights/weights-{test_type}/multiplication_weights.h5'\n    alice_weights_path = f'weights/weights-{test_type}/alice_weights.h5'\n    bob_weights_path = f'weights/weights-{test_type}/bob_weights.h5'\n\n    HO_model_addition.load_weights(HO_a_weights_path)\n    HO_model_multiplication.load_weights(HO_m_weights_path)\n    alice.load_weights(alice_weights_path)\n    bob.load_weights(bob_weights_path)\n\n    nonce = np.random.rand(batch_size, nonce_bits)\n\n    p1_batch = np.random.randint(\n        0, 2, p1_bits * batch_size).reshape(batch_size, p1_bits).astype('float32')\n    p2_batch = np.random.randint(\n        0, 2, p2_bits * batch_size).reshape(batch_size, p2_bits).astype('float32')\n    p3_batch = np.random.randint(\n        0, 2, p2_bits * batch_size).reshape(batch_size, p2_bits).astype('float32')\n    p33_batch = np.random.randint(\n        0, 2, p1_bits * batch_size).reshape(batch_size, p1_bits).astype('float32')\n\n    # Alice encrypts the message\n    cipher1, cipher2 = alice.predict([public_arr, p1_batch, p2_batch, nonce])\n    cipher3, _ = alice.predict([public_arr, p3_batch, p33_batch, nonce])\n\n    # HO adds the messages\n    op_a = np.zeros((cipher1.shape))\n    cipher4 = HO_model_addition.predict([op_a, cipher1, cipher2])\n    cipher5 = HO_model_addition.predict([op_a, cipher3, cipher4])\n\n    # HO multiplies the messages\n    op_m = np.ones((cipher1.shape))\n    cipher6 = HO_model_multiplication.predict([op_m, cipher1, cipher2])\n    cipher7 = HO_model_multiplication.predict([op_m, cipher3, cipher4])\n\n    # HO adds and multiplies the messages\n    cipher8 = HO_model_multiplication.predict([op_m, cipher4, cipher3])\n    cipher9 = HO_model_addition.predict([op_a, cipher6, cipher3])\n\n    p5 = decryption_accurancy(bob, cipher5, private_arr, nonce, p1_batch+p2_batch+p3_batch)\n    p7 = decryption_accurancy(bob, cipher7, private_arr, nonce, p1_batch*p2_batch*p3_batch)\n    p8 = decryption_accurancy(bob, cipher8, private_arr, nonce, (p1_batch+p2_batch)*p3_batch)\n    p9 = decryption_accurancy(bob, cipher9, private_arr, nonce, p1_batch*p2_batch+p3_batch)\n    return p5, p7, p8, p9\n\nif __name__ == \"__main__\":\n    rate = 0.2\n    batch_size = 448\n    curve = \"secp256r1\"\n    sequential_arithmetic_operations(rate, batch_size, curve)",
      "info": {
        "size": 3190,
        "last_modified": "2025-01-23T15:54:28.998689",
        "mime_type": "text/x-python",
        "extension": ".py"
      }
    },
    {
      "path": "plot_loss.py",
      "content": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot_loss(rate: float, curve: str):\n    \"\"\"Plots the loss of the ABHE, Bob and Eve models during training and save the plot as a pdf file.\n\n    Args:\n        rate: Dropout rate.\n        curve: Elliptic curve.\n    \"\"\"\n    plt.figure(figsize=(10, 6))\n    plt.rc('font', size=12)\n    plt.rc('axes', titlesize=16)\n    plt.rc('axes', labelsize=25)\n    plt.rc('xtick', labelsize=25)\n    plt.rc('ytick', labelsize=25)\n    plt.rc('legend', fontsize=25)\n    plt.ylim(0, 10)\n\n    df = pd.read_csv(f'dataset/ma-rate-{rate}-curve-{curve}.csv')\n\n    x = list(range(0, len(df)))\n\n    y_ab = df['ABloss']\n    y_bob = df['Bobloss']\n    y_eve = df['Eveloss']\n\n    plt.plot(x, y_ab, color='blue', linewidth=1, label='ABHE')\n    plt.plot(x, y_bob, color='green', linewidth=1, label='Bob')\n    plt.plot(x, y_eve, color='orange', linewidth=1, label='Eve')\n\n    plt.grid(True, which='both', linestyle='--', linewidth=0.5)\n    plt.xlabel('Iterations') \n    plt.ylabel('Loss') \n    plt.legend()\n    plt.savefig(f\"figures/training_loss.pdf\", bbox_inches='tight')\n\nif __name__ == \"__main__\":\n    plot_loss(0.1, \"secp256k1\")",
      "info": {
        "size": 1154,
        "last_modified": "2025-01-23T15:54:29.013104",
        "mime_type": "text/x-python",
        "extension": ".py"
      }
    },
    {
      "path": "__pycache__/sequential_arithmetic_operations.cpython-311.pyc",
      "content": "§\r\r\n\u0000\u0000\u0000\u0000Mðgv\f\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó¼\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000m\u0001Z\u0001\u0001\u0000d\u0000d\u0002l\u0002Z\u0003d\u0000d\u0003l\u0004m\u0005Z\u0005\u0001\u0000d\u0000d\u0004l\u0006m\u0007Z\u0007\u0001\u0000d\u0005e\bd\u0006e\td\u0007e\nd\be\u0007e\u0003j\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0003j\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0003j\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0003j\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0004\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\bd\t\u0004Z\fe\rd\nk\u0002\u0000\u0000\u0000\u0000r\u0015d\u000bZ\u000ed\fZ\u000fd\rZ\u0010\u0002\u0000e\fe\u000ee\u000fe\u0010¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0002S\u0000d\u0002S\u0000)\u000eé\u0000\u0000\u0000\u0000)\u0001Ú\u000fcreate_networksN)\u0001Ú\u0014decryption_accurancy)\u0001Ú\u0005TupleÚ\u0004rateÚ\nbatch_sizeÚ\u0005curveÚ\u0006returnc\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó \u0007\u0000\u0000\u0000d\u0001|\u0000\u0000d\u0002|\u0002\u0000\u0004}\u0003t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0003|\u0002\u0000d\u0004|\u0001\u0000d\u0005\u0005¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0004t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0006|\u0002\u0000d\u0004|\u0001\u0000d\u0005\u0005¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0005t\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0004j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0007\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0005j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0007\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\r\u0000\u0000}\u0006}\u0007}\b}\t}\t}\t}\n}\t}\u000b}\t}\t}\f}\rd\b|\u0003\u0000d\t\u0003}\u000ed\b|\u0003\u0000d\n\u0003}\u000fd\b|\u0003\u0000d\u000b\u0003}\u0010d\b|\u0003\u0000d\f\u0003}\u0011|\b \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u000e¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000|\r \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u000f¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000|\u0006 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0010¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000|\u0007 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0011¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001|\f¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0012t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\rd\u000e|\n|\u0001z\u0005\u0000\u0000¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001|\n¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u000f¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0013t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\rd\u000e|\u000b|\u0001z\u0005\u0000\u0000¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001|\u000b¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u000f¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0014t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\rd\u000e|\u000b|\u0001z\u0005\u0000\u0000¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001|\u000b¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u000f¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0015t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\rd\u000e|\n|\u0001z\u0005\u0000\u0000¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001|\n¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u000f¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0016|\u0006 \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0004|\u0013|\u0014|\u0012g\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0002\u0000\u0000}\u0017}\u0018|\u0006 \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0004|\u0015|\u0016|\u0012g\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0002\u0000\u0000}\u0019}\tt\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0017j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u001a|\b \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u001a|\u0017|\u0018g\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u001b|\b \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u001a|\u0019|\u001bg\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u001ct\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0017j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u001d|\r \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u001d|\u0017|\u0018g\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u001e|\r \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u001d|\u0019|\u001bg\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u001f|\r \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u001d|\u001b|\u0019g\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000} |\b \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u001a|\u001e|\u0019g\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}!t\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007|\u001c|\u0005|\u0012|\u0013|\u0014z\u0000\u0000\u0000|\u0015z\u0000\u0000\u0000¦\u0005\u0000\u0000«\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\"t\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007|\u001f|\u0005|\u0012|\u0013|\u0014z\u0005\u0000\u0000|\u0015z\u0005\u0000\u0000¦\u0005\u0000\u0000«\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}#t\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007| |\u0005|\u0012|\u0013|\u0014z\u0000\u0000\u0000|\u0015z\u0005\u0000\u0000¦\u0005\u0000\u0000«\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}$t\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007|!|\u0005|\u0012|\u0013|\u0014z\u0005\u0000\u0000|\u0015z\u0000\u0000\u0000¦\u0005\u0000\u0000«\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}%|\"|#|$|%f\u0004S\u0000)\u0010zº\n    Test to verify that the system is a somewhat homomorphic encryption system\n\n    Args:\n        rate: The dropout rate\n        batch_size: The batch size\n        curve: The curve\n    z\bma-rate-z\u0007-curve-z\u000fkey/public_key-Ú\u0001-z\u0004.npyz\u0010key/private_key-é\u0001\u0000\u0000\u0000z\u0010weights/weights-z\u0014/addition_weights.h5z\u001a/multiplication_weights.h5z\u0011/alice_weights.h5z\u000f/bob_weights.h5r\u0002\u0000\u0000\u0000é\u0002\u0000\u0000\u0000Ú\u0007float32)\u000eÚ\u0002npÚ\u0004loadr\u0003\u0000\u0000\u0000Ú\u0005shapeÚ\fload_weightsÚ\u0006randomÚ\u0004randÚ\u0007randintÚ\u0007reshapeÚ\u0006astypeÚ\u0007predictÚ\u0005zerosÚ\u0004onesr\u0004\u0000\u0000\u0000)&r\u0006\u0000\u0000\u0000r\u0007\u0000\u0000\u0000r\b\u0000\u0000\u0000Ú\ttest_typeÚ\npublic_arrÚ\u000bprivate_arrÚ\u0005aliceÚ\u0003bobÚ\u0011HO_model_additionÚ\u0001_Ú\u0007p1_bitsÚ\u0007p2_bitsÚ\nnonce_bitsÚ\u0017HO_model_multiplicationÚ\u0011HO_a_weights_pathÚ\u0011HO_m_weights_pathÚ\u0012alice_weights_pathÚ\u0010bob_weights_pathÚ\u0005nonceÚ\bp1_batchÚ\bp2_batchÚ\bp3_batchÚ\tp33_batchÚ\u0007cipher1Ú\u0007cipher2Ú\u0007cipher3Ú\u0004op_aÚ\u0007cipher4Ú\u0007cipher5Ú\u0004op_mÚ\u0007cipher6Ú\u0007cipher7Ú\u0007cipher8Ú\u0007cipher9Ú\u0002p5Ú\u0002p7Ú\u0002p8Ú\u0002p9s&\u0000\u0000\u0000                                      úy/Users/espensele/Desktop/Master/MasterOppg/Homomorphic-Neural-Cryptography/data_utils/sequential_arithmetic_operations.pyÚ sequential_arithmetic_operationsr?\u0000\u0000\u0000\u0007\u0000\u0000\u0000s\u0010\u0004\u0000\u0000\u0000ð\u0012\u0000\u001104Ð\u0010/Ð\u0010/¨\u0005Ð\u0010/Ð\u0010/Iå\u0011\u0013\u0017Ð\u0019C¨5Ð\u0019CÐ\u0019C°:Ð\u0019CÐ\u0019CÐ\u0019CÑ\u0011DÔ\u0011DJÝ\u0012\u0014'Ð\u001aE¨UÐ\u001aEÐ\u001aE°ZÐ\u001aEÐ\u001aEÐ\u001aEÑ\u0012FÔ\u0012FKåm|ð\u0000\u0000~\u0001H\u0002ô\u0000\u0000~\u0001N\u0002ð\u0000\u0000O\u0002P\u0002ô\u0000\u0000~\u0001Q\u0002ð\u0000\u0000S\u0002^\u0002ô\u0000\u0000S\u0002d\u0002ð\u0000\u0000e\u0002f\u0002ô\u0000\u0000S\u0002g\u0002ð\u0000\u0000i\u0002m\u0002ñ\u0000\u0000n\u0001n\u0002ô\u0000\u0000n\u0001n\u0002Ñ\u0004jE3Ð\u0010! 1 a¨\u0011¨G°Q¸\u0007À\u0011ÀAÀzÐSjà\u0018J¨9Ð\u0018JÐ\u0018JÐ\u0018JÐ\u0004\u0015Ø\u0018P¨9Ð\u0018PÐ\u0018PÐ\u0018PÐ\u0004\u0015Ø\u0019H¨IÐ\u0019HÐ\u0019HÐ\u0019HÐ\u0004\u0016Ø\u0017D¨)Ð\u0017DÐ\u0017DÐ\u0017DÐ\u0004\u0014à\u0004\u0015×\u0004\"Ò\u0004\"Ð#4Ñ\u00045Ô\u00045Ð\u00045Ø\u0004\u001b×\u0004(Ò\u0004(Ð):Ñ\u0004;Ô\u0004;Ð\u0004;Ø\u0004\t×\u0004\u0016Ò\u0004\u0016Ð\u0017)Ñ\u0004*Ô\u0004*Ð\u0004*Ø\u0004\u0007×\u0004\u0014Ò\u0004\u0014Ð\u0015%Ñ\u0004&Ô\u0004&Ð\u0004&å\f\u000eINN: zÑ\f2Ô\f2Eå\u000f\u0011y×\u000f Ò\u000f Ø\b\t1g\nÑ\u000e\"ñ\u0003\u0001\u0010$ô\u0000\u0001\u0010$ß$+¢G¨J¸\u0007Ñ$@Ô$@Ç\u0016Â\u0016È\tÑARÔARð\u0003\u0000\u0005\rå\u000f\u0011y×\u000f Ò\u000f Ø\b\t1g\nÑ\u000e\"ñ\u0003\u0001\u0010$ô\u0000\u0001\u0010$ß$+¢G¨J¸\u0007Ñ$@Ô$@Ç\u0016Â\u0016È\tÑARÔARð\u0003\u0000\u0005\rå\u000f\u0011y×\u000f Ò\u000f Ø\b\t1g\nÑ\u000e\"ñ\u0003\u0001\u0010$ô\u0000\u0001\u0010$ß$+¢G¨J¸\u0007Ñ$@Ô$@Ç\u0016Â\u0016È\tÑARÔARð\u0003\u0000\u0005\rå\u0010\u0012\t×\u0010!Ò\u0010!Ø\b\t1g\nÑ\u000e\"ñ\u0003\u0001\u0011$ô\u0000\u0001\u0011$ß$+¢G¨J¸\u0007Ñ$@Ô$@Ç\u0016Â\u0016È\tÑARÔARð\u0003\u0000\u0005\u000eð\b\u0000\u0018\u001d}} j°(¸HÀeÐ%LÑ\u0017MÔ\u0017MÑ\u0004\u0014GWØ\u0011\u0016\u001d\u001d \n¨H°iÀ\u0015Ð\u001fGÑ\u0011HÔ\u0011HJGQõ\u0006\u0000\f\u000e8W]Ñ\u000b$Ô\u000b$DØ\u000e\u001f×\u000e'Ò\u000e'¨\u0014¨w¸\u0007Ð(@Ñ\u000eAÔ\u000eAGØ\u000e\u001f×\u000e'Ò\u000e'¨\u0014¨w¸\u0007Ð(@Ñ\u000eAÔ\u000eAGõ\u0006\u0000\f\u000e7GMÑ\u000b#Ô\u000b#DØ\u000e%×\u000e-Ò\u000e-¨t°W¸gÐ.FÑ\u000eGÔ\u000eGGØ\u000e%×\u000e-Ò\u000e-¨t°W¸gÐ.FÑ\u000eGÔ\u000eGGð\u0006\u0000\u000f&×\u000e-Ò\u000e-¨t°W¸gÐ.FÑ\u000eGÔ\u000eGGØ\u000e\u001f×\u000e'Ò\u000e'¨\u0014¨w¸\u0007Ð(@Ñ\u000eAÔ\u000eAGå\t\u001dc 7¨K¸\u0015À\bÈ\u0018Ñ@QÐRZÑ@ZÑ\t[Ô\t[BÝ\t\u001dc 7¨K¸\u0015À\bÈ\u0018Ñ@QÐRZÑ@ZÑ\t[Ô\t[BÝ\t\u001dc 7¨K¸\u0015À\u0018È(ÑARÐT\\Ñ@\\Ñ\t]Ô\t]BÝ\t\u001dc 7¨K¸\u0015À\bÈ\u0018Ñ@QÐRZÑ@ZÑ\t[Ô\t[BØ\u000b\rr2r>Ð\u0004\u0019ó\u0000\u0000\u0000\u0000Ú\b__main__gÉ?iÀ\u0001\u0000\u0000Ú\tsecp256r1)\u0011Ú\u0017neural_network.networksr\u0003\u0000\u0000\u0000Ú\u0005numpyr\u000f\u0000\u0000\u0000Ú\u0013data_utils.accuracyr\u0004\u0000\u0000\u0000Ú\u0006typingr\u0005\u0000\u0000\u0000Ú\u0005floatÚ\u0003intÚ\u0003strÚ\u0007float64r?\u0000\u0000\u0000Ú\b__name__r\u0006\u0000\u0000\u0000r\u0007\u0000\u0000\u0000r\b\u0000\u0000\u0000©\u0000r@\u0000\u0000\u0000r>\u0000\u0000\u0000ú\b<module>rM\u0000\u0000\u0000\u0001\u0000\u0000\u0000sâ\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u00003Ð\u00003Ð\u00003Ð\u00003Ð\u00003Ð\u00003Ø\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ø\u00004Ð\u00004Ð\u00004Ð\u00004Ð\u00004Ð\u00004Ø\u0000\u0018Ð\u0000\u0018Ð\u0000\u0018Ð\u0000\u0018Ð\u0000\u0018Ð\u0000\u0018ð\u0006;\u0001\u001a¨5ð\u0000;\u0001\u001a¸cð\u0000;\u0001\u001aÈ#ð\u0000;\u0001\u001aÐRWÐXZÔXbÐdfÔdnÐprÔpzÐ|~ô\u0000\u0000}\u0001G\u0002ð\u0000\u0000Y\u0001G\u0002ô\u0000\u0000S\u0001H\u0002ð\u0000;\u0001\u001að\u0000;\u0001\u001að\u0000;\u0001\u001að\u0000;\u0001\u001aðz\u0001\u0000\u0004\fzÒ\u0003\u0019Ð\u0003\u0019Ø\u000b\u000eDØ\u0011\u0014JØ\f\u0017EØ\u0004$Ð\u0004$ T¨:°uÑ\u0004=Ô\u0004=Ð\u0004=Ð\u0004=Ð\u0004=ð\t\u0000\u0004\u001aÐ\u0003\u0019r@\u0000\u0000\u0000",
      "info": {
        "size": 4734,
        "last_modified": "2025-01-23T15:54:29.014868",
        "mime_type": "application/octet-stream",
        "extension": ".pyc"
      }
    },
    {
      "path": "__pycache__/accuracy.cpython-311.pyc",
      "content": "§\r\r\n\u0000\u0000\u0000\u0000MðgW\u0006\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000óÎ\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000m\u0001Z\u0001\u0001\u0000d\u0000d\u0002l\u0002Z\u0003d\u0000d\u0003l\u0004m\u0005Z\u0005\u0001\u0000d\u0004e\u0001d\u0005e\u0005e\u0003j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0006e\u0005e\u0003j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0007e\u0007d\be\u0005e\u0003j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\te\u0003j\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\fd\n\u0004Z\td\u0005e\u0005e\u0003j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u000be\u0005e\u0003j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0004d\f\u0004Z\nd\u0002S\u0000)\ré\u0000\u0000\u0000\u0000)\u0001Ú\u0005ModelN)\u0001Ú\u0007NDArrayÚ\u0005modelÚ\u0006cipherÚ\u0007key_arrÚ\u0005nonceÚ\u0007p_batchÚ\u0006returnc\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\"\u0001\u0000\u0000\u0000|\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001|\u0002|\u0003g\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0005t\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0005¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0006t\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0006|\u0004k\u0002\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0007t\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0006j\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\bt\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007|\bz\u000b\u0000\u0000d\u0001z\u0005\u0000\u0000d\u0002¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0000)\u0003aÀ\u0001\u0000\u0000Calculates the decryption accuracy of the model.\n    \n    Args:\n        model: Model.\n        cipher: Ciphertext, a numpy array of numpy arrays consisting of float32 elements.\n        key_arr: Key array, a numpy array of numpy arrays consisting of float64 elements.\n        nonce: Nonce.\n        p_batch: Plaintext batch, a numpy array of numpy arrays consisting of float32 elements.\n\n    Returns:\n        The decryption accuracy of the model.\n    éd\u0000\u0000\u0000é\u0002\u0000\u0000\u0000)\bÚ\u0007predictÚ\u0002npÚ\u0005roundÚ\u0006astypeÚ\u0003intÚ\u0003sumÚ\u0004prodÚ\u0005shape)\tr\u0005\u0000\u0000\u0000r\u0006\u0000\u0000\u0000r\u0007\u0000\u0000\u0000r\b\u0000\u0000\u0000r\t\u0000\u0000\u0000Ú\tdecryptedÚ\u000edecrypted_bitsÚ\fcorrect_bitsÚ\ntotal_bitss\t\u0000\u0000\u0000         úa/Users/espensele/Desktop/Master/MasterOppg/Homomorphic-Neural-Cryptography/data_utils/accuracy.pyÚ\u0014decryption_accurancyr\u001b\u0000\u0000\u0000\u0005\u0000\u0000\u0000s{\u0000\u0000\u0000\u0000ð\u001c\u0000\u0011\u0016\r\rv w°\u0005Ð\u001e6Ñ\u00107Ô\u00107IÝ\u0015\u0017XiÑ\u0015(Ô\u0015(×\u0015/Ò\u0015/µ\u0003Ñ\u00154Ô\u00154NÝ\u0013\u00156.¨WÒ\u001a5Ñ\u00136Ô\u00136LÝ\u0011\u0013\u0017\u001eÔ\u0019-Ñ\u0011.Ô\u0011.JÝ\u000b\r8L :Ñ\u0014-°\u0003Ñ\u00143°QÑ\u000b7Ô\u000b7Ð\u00047ó\u0000\u0000\u0000\u0000Ú\u000fcomputed_cipherc\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó¢\u0000\u0000\u0000\u0000d\u0001}\u0002t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001|\u0000z\n\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0002k\u0001\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0003t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000j\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0004|\u0003|\u0004z\u000b\u0000\u0000d\u0002z\u0005\u0000\u0000S\u0000)\u0003a6\u0001\u0000\u0000Calculates the accuracy of the HO model.\n\n    Args:\n        cipher: Ciphertext, a numpy array of numpy arrays consisting of float32 elements.\n        computed_cipher: Computed ciphertext, a numpy array of numpy arrays consisting of float32 elements.\n    \n    Returns:\n        The accuracy of the HO model.\n    gü©ñÒMbP?r\f\u0000\u0000\u0000)\u0005r\u000f\u0000\u0000\u0000r\u0013\u0000\u0000\u0000Ú\u0003absr\u0014\u0000\u0000\u0000r\u0015\u0000\u0000\u0000)\u0005r\u0006\u0000\u0000\u0000r\u001d\u0000\u0000\u0000Ú\ttoleranceÚ\u0010correct_elementsÚ\u000etotal_elementss\u0005\u0000\u0000\u0000     r\u001a\u0000\u0000\u0000Ú\u000bHO_accuracyr#\u0000\u0000\u0000\u0019\u0000\u0000\u0000sN\u0000\u0000\u0000\u0000ð\u0014\u0000\u0011\u0015IÝ\u0017\u0019vbf _°vÑ%=Ñ\u001e>Ô\u001e>À)Ò\u001eKÑ\u0017LÔ\u0017LÐ\u0004\u0014Ý\u0015\u0017WV\\Ñ\u0015*Ô\u0015*NØ\f\u001c~Ñ\f-°\u0013Ñ\u000b4Ð\u00044r\u001c\u0000\u0000\u0000)\u000bÚ\u0017tensorflow.keras.modelsr\u0003\u0000\u0000\u0000Ú\u0005numpyr\u000f\u0000\u0000\u0000Ú\fnumpy.typingr\u0004\u0000\u0000\u0000Ú\u0007object_r\u0012\u0000\u0000\u0000Ú\u0007float64r\u001b\u0000\u0000\u0000r#\u0000\u0000\u0000©\u0000r\u001c\u0000\u0000\u0000r\u001a\u0000\u0000\u0000ú\b<module>r*\u0000\u0000\u0000\u0001\u0000\u0000\u0000sà\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ø\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ø\u0000 Ð\u0000 Ð\u0000 Ð\u0000 Ð\u0000 Ð\u0000 ð\u0004\u0012\u00018 \u0005ð\u0000\u0012\u00018¨w°r´zÔ/Bð\u0000\u0012\u00018ÈWÐUWÔU_ÔM`ð\u0000\u0012\u00018Ðilð\u0000\u0012\u00018Ðw~ð\u0000\u0000@\u0002B\u0002ô\u0000\u0000@\u0002J\u0002ô\u0000\u0000x\u0001K\u0002ð\u0000\u0012\u00018ð\u0000\u0000P\u0002R\u0002ô\u0000\u0000P\u0002Z\u0002ð\u0000\u0012\u00018ð\u0000\u0012\u00018ð\u0000\u0012\u00018ð\u0000\u0012\u00018ð(\r\u00015\u0007 \u0002¤\nÔ\u0018+ð\u0000\r\u00015¸gÀbÄjÔ>Qð\u0000\r\u00015ð\u0000\r\u00015ð\u0000\r\u00015ð\u0000\r\u00015ð\u0000\r\u00015ð\u0000\r\u00015r\u001c\u0000\u0000\u0000",
      "info": {
        "size": 2621,
        "last_modified": "2025-01-23T15:54:29.016561",
        "mime_type": "application/octet-stream",
        "extension": ".pyc"
      }
    },
    {
      "path": "__pycache__/analyse_cipher.cpython-311.pyc",
      "content": "§\r\r\n\u0000\u0000\u0000\u0000Mðg\u0002\n\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000óÞ\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000Z\u0001d\u0000d\u0001l\u0002m\u0003Z\u0004\u0001\u0000d\u0000d\u0002l\u0005m\u0006Z\u0006\u0001\u0000d\u0000d\u0001l\u0007Z\bd\u0000d\u0001l\u0002m\u0003Z\u0004\u0001\u0000d\u0000d\u0001l\tZ\nd\u0000d\u0001l\u0000Z\u0001d\u0000d\u0003l\u000bm\fZ\f\u0001\u0000d\u0004e\rd\u0005e\u000ed\u0006e\u000fd\u0007e\fe\u0001j\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\bd\b\u0004Z\u0011d\te\u0006e\r\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0005e\u000ed\u0006e\u000ff\u0006d\n\u0004Z\u0012e\u0013d\u000bk\u0002\u0000\u0000\u0000\u0000r\u0017g\u0000d\f¢\u0001Z\u0014d\rZ\u0015d\u000eZ\u0016\u0002\u0000e\u0012e\u0014e\u0015e\u0016¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0001S\u0000d\u0001S\u0000)\u000fé\u0000\u0000\u0000\u0000N)\u0001Ú\u0004List)\u0001Ú\u0007NDArrayÚ\u0004rateÚ\u0005curveÚ\nbatch_sizeÚ\u0006returnc\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\u0001\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001|\u0000\u0000d\u0002|\u0001\u0000d\u0003|\u0002\u0000d\u0004\u0007¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0003t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001|\u0000\u0000d\u0002|\u0001\u0000d\u0003|\u0002\u0000d\u0005\u0007¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0004t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001|\u0000\u0000d\u0002|\u0001\u0000d\u0003|\u0002\u0000d\u0006\u0007¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0005t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001|\u0000\u0000d\u0002|\u0001\u0000d\u0003|\u0002\u0000d\u0007\u0007¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0006t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001|\u0000\u0000d\u0002|\u0001\u0000d\u0003|\u0002\u0000d\b\u0007¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0007t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0003|\u0004|\u0005|\u0006|\u0007f\u0005¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\bt\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\bd\t¬\n¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\t|\td\t\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0000)\u000ba\u0001\u0000\u0000Calculates the standard deviation of five ciphertexts given a dropout rate and curve.\n    Used to calculate the standard deviation of the ciphertexts to evaluate the probabilistic encryption.\n    \n    Args:\n        rate: Dropout rate.\n        curve: Elliptic curve.\n        batch_size: Number of samples in the dataset.\n    \n    Returns:\n        std: Standard deviation of the ciphertexts.\n    z\u0010ciphertext/rate-z\u0007-curve-z\u0007-batch-z\u0006-1.npyz\u0006-2.npyz\u0006-3.npyz\u0006-4.npyz\u0006-5.npyr\u0002\u0000\u0000\u0000)\u0001Ú\u0004axis)\u0004Ú\u0002npÚ\u0004loadÚ\u0005stackÚ\u0003std)\nr\u0005\u0000\u0000\u0000r\u0006\u0000\u0000\u0000r\u0007\u0000\u0000\u0000Ú\u0002C1Ú\u0002C2Ú\u0002C3Ú\u0002C4Ú\u0002C5Ú\u000estacked_arraysr\u000e\u0000\u0000\u0000s\n\u0000\u0000\u0000          úg/Users/espensele/Desktop/Master/MasterOppg/Homomorphic-Neural-Cryptography/data_utils/analyse_cipher.pyÚ!probabilistic_encryption_analysisr\u0016\u0000\u0000\u0000\n\u0000\u0000\u0000s\u0012\u0001\u0000\u0000\u0000õ\u0018\u0000\n\f\u0017Ð\u0011Q DÐ\u0011QÐ\u0011Q°\u0015Ð\u0011QÐ\u0011Q¸zÐ\u0011QÐ\u0011QÐ\u0011QÑ\tRÔ\tRBÝ\t\u000b\u0017Ð\u0011Q DÐ\u0011QÐ\u0011Q°\u0015Ð\u0011QÐ\u0011Q¸zÐ\u0011QÐ\u0011QÐ\u0011QÑ\tRÔ\tRBÝ\t\u000b\u0017Ð\u0011Q DÐ\u0011QÐ\u0011Q°\u0015Ð\u0011QÐ\u0011Q¸zÐ\u0011QÐ\u0011QÐ\u0011QÑ\tRÔ\tRBÝ\t\u000b\u0017Ð\u0011Q DÐ\u0011QÐ\u0011Q°\u0015Ð\u0011QÐ\u0011Q¸zÐ\u0011QÐ\u0011QÐ\u0011QÑ\tRÔ\tRBÝ\t\u000b\u0017Ð\u0011Q DÐ\u0011QÐ\u0011Q°\u0015Ð\u0011QÐ\u0011Q¸zÐ\u0011QÐ\u0011QÐ\u0011QÑ\tRÔ\tRBÝ\u0015\u0017Xr 2 r¨2¨rÐ\u001e2Ñ\u00153Ô\u00153NÝ\n\f&\u001e aÐ\n(Ñ\n(Ô\n(CØ\u000b\u000eq6Mó\u0000\u0000\u0000\u0000Ú\rdropout_ratesc\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó®\u0002\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001¬\u0002¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000g\u0000}\u0003|\u0000D\u0000]1}\u0004t\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0004|\u0001|\u0002¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0005|\u0005D\u0000]\u001b}\u0006|\u0003 \u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0006d\u0003|\u0004d\u0004\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u001c2t\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0007t\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0005¬\u0006¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0007d\b¬\t¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\nd\u000b¬\f¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\rd\u000e¬\f¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u000fd\u000e¬\f¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0010d\u0011¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007d\u0012d\u0013d\u0014d\u0014d\u0015d\u0016d\u0017d\u0016¬\u0018¦\t\u0000\u0000«\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0019¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0015¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u001a|\u0001\u0000d\u001b\u0003d\u001c¬\u001d¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u001eS\u0000)\u001fa\u001c\u0001\u0000\u0000Plots the mean and standard deviation of the standard deviation of five ciphertexts for a given curve. \n    Saves the plot as a pdf file.\n\n    Args:\n        dropout_rates: List of dropout rates.\n        curve: Elliptic curve.\n        batch_size: Number of samples in the dataset.\n    Ú\bdarkgrid)\u0001Ú\u0005stylez\u0012Standard Deviation)\u0003Ú\u0005valueÚ\u0004typeÚ\fdropout_rate)\u0002é\n\u0000\u0000\u0000é\u0006\u0000\u0000\u0000)\u0001Ú\u0007figsizeÚ\u0004fonté\f\u0000\u0000\u0000)\u0001Ú\u0004sizeÚ\u0004axesé\u001e\u0000\u0000\u0000)\u0001Ú\tlabelsizeÚ\u0005xtické\u0019\u0000\u0000\u0000Ú\u0005ytickr\u0002\u0000\u0000\u0000ç333333Ó?r\u001e\u0000\u0000\u0000r\u001c\u0000\u0000\u0000r\u001d\u0000\u0000\u0000TFÚ\u0002sd)\tÚ\u0004dataÚ\u0001xÚ\u0001yÚ\u0003huer\u001b\u0000\u0000\u0000Ú\u0007markersÚ\u0006dashesÚ\berrorbarÚ\u0006legendz\fDropout Ratez\bfigures/z\b-std.pdfÚ\u0005tight)\u0001Ú\u000bbbox_inchesN)\u000fÚ\u0003snsÚ\tset_themer\u0016\u0000\u0000\u0000Ú\u0006appendÚ\u0002pdÚ\tDataFrameÚ\u0003pltÚ\u0006figureÚ\u0002rcÚ\u0004ylimÚ\blineplotÚ\u0006xlabelÚ\u0006ylabelÚ\u0004gridÚ\u0007savefig)\br\u0018\u0000\u0000\u0000r\u0006\u0000\u0000\u0000r\u0007\u0000\u0000\u0000r-\u0000\u0000\u0000r\u0005\u0000\u0000\u0000r\u000e\u0000\u0000\u0000Ú\u0001sÚ\u0002dfs\b\u0000\u0000\u0000        r\u0015\u0000\u0000\u0000Ú\u0011plot_std_and_meanrG\u0000\u0000\u0000\u001f\u0000\u0000\u0000s\u0001\u0000\u0000\u0000õ\u0012\u0000\u0005\bM\nÐ\u0004#Ñ\u0004#Ô\u0004#Ð\u0004#à\u000b\rDØ\u0010\u001dð\u0000\u0003\u0005Z\u0001ð\u0000\u0003\u0005Z\u0001\u0004Ý\u000e/°\u0004°e¸ZÑ\u000eHÔ\u000eH\u0003Ø\u0011\u0014ð\u0000\u0001\tZ\u0001ð\u0000\u0001\tZ\u0001AØ\f\u0010KK !Ð-AÐSWÐ\u0018XÐ\u0018XÑ\fYÔ\fYÐ\fYÐ\fYð\u0003\u0001\tZ\u0001õ\u0006\u0000\n\f\u001cdÑ\t\u001bÔ\t\u001bBå\u0004\u0007JwÐ\u0004\u001fÑ\u0004\u001fÔ\u0004\u001fÐ\u0004\u001fÝ\u0004\u0007F6\u0002Ð\u0004\u001bÑ\u0004\u001bÔ\u0004\u001bÐ\u0004\u001bÝ\u0004\u0007F6RÐ\u0004 Ñ\u0004 Ô\u0004 Ð\u0004 Ý\u0004\u0007F7bÐ\u0004!Ñ\u0004!Ô\u0004!Ð\u0004!Ý\u0004\u0007F7bÐ\u0004!Ñ\u0004!Ô\u0004!Ð\u0004!Ý\u0004\u0007HQ\u0003Ñ\u0004\u0014Ô\u0004\u0014Ð\u0004\u0014Ý\u0004\u0007LbN¨g¸6È\u0016ÐY]ÐfkÐvzð\u0000\u0000D\u0002I\u0002ð\u0000\u0000\u0005J\u0002ñ\u0000\u0000\u0005J\u0002ô\u0000\u0000\u0005J\u0002ð\u0000\u0000\u0005J\u0002Ý\u0004\u0007J~Ñ\u0004\u001eÔ\u0004\u001eÐ\u0004\u001eÝ\u0004\u0007JÐ\u000f#Ñ\u0004$Ô\u0004$Ð\u0004$Ý\u0004\u0007HTNNNÝ\u0004\u0007KÐ\u0010*5Ð\u0010*Ð\u0010*Ð\u0010*¸\u0007Ð\u0004@Ñ\u0004@Ô\u0004@Ð\u0004@Ð\u0004@Ð\u0004@r\u0017\u0000\u0000\u0000Ú\b__main__)\bg{\u0014®Gáz?g¹?gÉ?r+\u0000\u0000\u0000gÙ?g\u0000\u0000\u0000\u0000\u0000\u0000à?g333333ã?gffffffæ?Ú\tsecp224r1é\u0001\u0000\u0000\u0000)\u0017Ú\u0005numpyr\u000b\u0000\u0000\u0000Ú\u0011matplotlib.pyplotÚ\u0006pyplotr<\u0000\u0000\u0000Ú\u0006typingr\u0003\u0000\u0000\u0000Ú\u0006pandasr:\u0000\u0000\u0000Ú\u0007seabornr7\u0000\u0000\u0000Ú\fnumpy.typingr\u0004\u0000\u0000\u0000Ú\u0005floatÚ\u0003strÚ\u0003intÚ\u0007float32r\u0016\u0000\u0000\u0000rG\u0000\u0000\u0000Ú\b__name__Ú\u0005ratesr\u0006\u0000\u0000\u0000r\u0007\u0000\u0000\u0000©\u0000r\u0017\u0000\u0000\u0000r\u0015\u0000\u0000\u0000ú\b<module>rY\u0000\u0000\u0000\u0001\u0000\u0000\u0000s0\u0001\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ø\u0000\u001fÐ\u0000\u001fÐ\u0000\u001fÐ\u0000\u001fÐ\u0000\u001fÐ\u0000\u001fØ\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ø\u0000\u0013Ð\u0000\u0013Ð\u0000\u0013Ð\u0000\u0013Ø\u0000\u001fÐ\u0000\u001fÐ\u0000\u001fÐ\u0000\u001fÐ\u0000\u001fÐ\u0000\u001fØ\u0000\u0015Ð\u0000\u0015Ð\u0000\u0015Ð\u0000\u0015Ø\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ø\u0000 Ð\u0000 Ð\u0000 Ð\u0000 Ð\u0000 Ð\u0000 ð\u0004\u0013\u0001\u0012¨Eð\u0000\u0013\u0001\u0012¸#ð\u0000\u0013\u0001\u0012È3ð\u0000\u0013\u0001\u0012ÐSZÐ[]Ô[eÔSfð\u0000\u0013\u0001\u0012ð\u0000\u0013\u0001\u0012ð\u0000\u0013\u0001\u0012ð\u0000\u0013\u0001\u0012ð*\u001d\u0001A\u0001 T¨%¤[ð\u0000\u001d\u0001A\u0001¸\u0013ð\u0000\u001d\u0001A\u0001È#ð\u0000\u001d\u0001A\u0001ð\u0000\u001d\u0001A\u0001ð\u0000\u001d\u0001A\u0001ð\u0000\u001d\u0001A\u0001ð>\u0000\u0004\fzÒ\u0003\u0019Ð\u0003\u0019Ø\f5Ð\f5Ð\f5EØ\f\u0017EØ\u0011\u0012JØ\u0004\u0015Ð\u0004\u0015eU JÑ\u0004/Ô\u0004/Ð\u0004/Ð\u0004/Ð\u0004/ð\t\u0000\u0004\u001aÐ\u0003\u0019r\u0017\u0000\u0000\u0000",
      "info": {
        "size": 4314,
        "last_modified": "2025-01-23T15:54:29.017956",
        "mime_type": "application/octet-stream",
        "extension": ".pyc"
      }
    },
    {
      "path": "__pycache__/dataset_generator.cpython-311.pyc",
      "content": "§\r\r\n\u0000\u0000\u0000\u0000Mðg\u0014\u0010\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000óÆ\u0002\u0000\u0000\u0000d\u0000d\u0001l\u0000Z\u0001d\u0000d\u0002l\u0002m\u0003Z\u0003m\u0004Z\u0004\u0001\u0000d\u0000d\u0003l\u0005m\u0006Z\u0006\u0001\u0000d\u0000d\u0004l\u0007m\bZ\b\u0001\u0000e\u0001j\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000e\u0001j\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0000d\u0005e\u0001j\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¬\u0006¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\re\u0001j\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\r¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\t\u0000\t\u0000\t\u0000\t\u0000d\u001bd\ne\u0003e\be\u0001j\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\be\u0001j\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000g\u0002e\be\u0001j\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0002\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u000be\u0010d\fe\u0010d\re\u0010d\u000ee\u0011d\u000fe\u0004e\be\u0001j\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\be\u0001j\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\be\u0001j\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0003\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\fd\u0010\u0005Z\u0013\t\u0000d\u001cd\u0011e\u0010d\u0012e\u0010d\fe\u0010d\u0013e\be\u0001j\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0014e\u0006d\u0015e\u0003e\be\u0001j\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\be\u0001j\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000g\u0002e\be\u0001j\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0002\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0016e\u0010d\re\u0010d\u000fe\u0004e\be\u0001j\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\be\u0001j\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\be\u0001j\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0003\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0012d\u0017\u0005Z\u0014e\u0015d\u0018k\u0002\u0000\u0000\u0000\u0000r\u0014\u0002\u0000e\u0013d\u0019\u0000d\u001ad\u001a¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0003\u0000\u0000Z\u0016Z\u0017Z\u0018d\u0001S\u0000d\u0001S\u0000)\u001dé\u0000\u0000\u0000\u0000N)\u0002Ú\bCallableÚ\u0005Tuple)\u0001Ú\u0005Model)\u0001Ú\u0007NDArrayé\u0002\u0000\u0000\u0000)\u0001Ú\u0005dtypeé\u0010\u0000\u0000\u0000é\u0000\u0002\u0000\u0000Ú\rinterpolationÚ\u0005op_fnÚ\u000bnum_samplesÚ\nbatch_sizeÚ\u0004seedÚ\u0004modeÚ\u0006returnc\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\u0002\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u0002J\u0000\u0001t\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000g\u0000g\u0000g\u0000}\u0007}\u0006}\u0005t\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0002¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000D\u0000]Á}\bt\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001d\u0002d\u0003|\u0001f\u0002¬\u0004¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\t|\u0004d\u0005k\u0002\u0000\u0000\u0000\u0000r\u0005|\td\u0006z\u0012\u0000\u0000}\t|\t\\\u0002\u0000\u0000}\n}\u000bd\u0007}\ft\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001|\fz\u0005\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\rt\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001|\rd\b¬\t¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u000ed\n|\n|\u000e<\u0000\u0000\u0000d\n|\u000b|\u000e<\u0000\u0000\u0000\u0002\u0000|\u0000|\n|\u000b¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u000f|\u0005 \b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\n¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000|\u0006 \b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u000b¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000|\u0007 \b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u000f¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000Ât\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0005¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0006¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0003S\u0000)\u000ba\u0010\u0002\u0000\u0000Generates a dataset given an operation. Used to generate static dataset for training.\n\n    Args:\n        op_fn: A function which accepts 2 numpy arrays as arguments and returns a single numpy array as the result.\n        num_samples: Size of the input and output arrays.\n        batch_size: Number of samples in the dataset.\n        seed: random seed\n\n    Returns: Tuple of (X1, X2, y), where X1, X2 and y are numpy arrays of numpy arrays containing float64 elements. \n        y is the result of the operation on X1 and X2.\n    g\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000gÜ1¯\u0002\u0000\u0000ð?r\u0007\u0000\u0000\u0000)\u0003Ú\u0003lowÚ\u0004highÚ\u0004sizeÚ\rextrapolationg¹?gÉ?F)\u0001Ú\u0007replacer\u0002\u0000\u0000\u0000)\nÚ\bcallableÚ\u0002npÚ\u0006randomr\u000f\u0000\u0000\u0000Ú\u0005rangeÚ\u0007uniformÚ\u0003intÚ\u0006choiceÚ\u0006appendÚ\u0005array)\u0010r\f\u0000\u0000\u0000r\r\u0000\u0000\u0000r\u000e\u0000\u0000\u0000r\u000f\u0000\u0000\u0000r\u0010\u0000\u0000\u0000Ú\nX1_datasetÚ\nX2_datasetÚ\ty_datasetÚ\u0001iÚ\u0001XÚ\u0001aÚ\u0001bÚ\rzero_fractionÚ\tnum_zerosÚ\u000findices_to_zeroÚ\u0001Ys\u0010\u0000\u0000\u0000                új/Users/espensele/Desktop/Master/MasterOppg/Homomorphic-Neural-Cryptography/data_utils/dataset_generator.pyÚ\u0017generate_static_datasetr-\u0000\u0000\u0000\u000f\u0000\u0000\u0000sM\u0001\u0000\u0000\u0000õ$\u0000\f\u0014E??Ð\u0004\u001aÐ\u0004\u001a?å\u0004\u0006INN4Ñ\u0004\u0018Ô\u0004\u0018Ð\u0004\u0018à(*¨B°\u0002I\nJå\r\u0012:Ñ\r\u001eÔ\r\u001eð\u0000\u0012\u0005\u001cð\u0000\u0012\u0005\u001c\u0001Ý\f\u000eI×\f\u001dÒ\f\u001d #¨J¸aÀ\u001bÐ=MÐ\f\u001dÑ\fNÔ\fN\u0001Ø\u000b\u000f?Ò\u000b\"Ð\u000b\"Ø\f\r\u0013HAØ\u000f\u0010\u0004\u00011à\u0018\u001b\rÝ\u0014\u0017\u000b mÑ\u00183Ñ\u00144Ô\u00144\tõ\u0006\u0000\u001b\u001d)×\u001a*Ò\u001a*¨;¸\tÈ5Ð\u001a*Ñ\u001aQÔ\u001aQ\u000fØ\u001d\u001e\u0001/Ñ\b\u001aØ\u001d\u001e\u0001/Ñ\b\u001aà\f\u0011E!QKK\u0001à\b\u0012×\b\u0019Ò\b\u0019!Ñ\b\u001cÔ\b\u001cÐ\b\u001cØ\b\u0012×\b\u0019Ò\b\u0019!Ñ\b\u001cÔ\b\u001cÐ\b\u001cØ\b\u0011×\b\u0018Ò\b\u0018\u0011Ñ\b\u001bÔ\b\u001bÐ\b\u001bÐ\b\u001bå\u000b\r8JÑ\u000b\u001fÔ\u000b\u001f¥\u0012¤\u0018¨*Ñ!5Ô!5µr´xÀ\tÑ7JÔ7JÐ\u000bJÐ\u0004Jó\u0000\u0000\u0000\u0000Ú\u0007p1_bitsÚ\u0007p2_bitsÚ\npublic_arrÚ\u0005aliceÚ\u0007task_fnÚ\nnonce_bitsc\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó¬\u0002\u0000\u0000\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0002|\u0006¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\bt\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001d\u0002|\u0000|\u0002z\u0005\u0000\u0000¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0002|\u0000¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\tt\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001d\u0002|\u0001|\u0002z\u0005\u0000\u0000¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0002|\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\n|\u0004 \u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0003|\t|\n|\bg\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0002\u0000\u0000}\u000b}\fd\u0001|\u000b|\u000bd\u0003k\u0002\u0000\u0000\u0000\u0000<\u0000\u0000\u0000d\u0001|\f|\fd\u0003k\u0002\u0000\u0000\u0000\u0000<\u0000\u0000\u0000g\u0000}\rt\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0005¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u0002J\u0000\u0001t\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u000b¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000D\u0000]/}\u000e\u0002\u0000|\u0005|\u000b|\u000e\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\f|\u000e\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u000f|\r \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u000f¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u00000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\r¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\r|\u000b|\f|\rf\u0003S\u0000)\u0004a\u001c\u0003\u0000\u0000Generates a dataset with ciphertext given an operation. Used to generate a dataset of ciphertexts encrypted by Alice.\n\n    Args:\n        p1_bits: Number of bits in plaintext 1.\n        p2_bits: Number of bits in plaintext 2. \n        batch_size: Number of samples in the dataset. \n        public_arr: Public key, an numpy array of numpy arrays containing float64 elements. \n        alice: Alice Model.\n        task_fn: A function which accepts 2 numpy arrays as arguments and returns a single numpy array as the result. \n        nonce_bits: Number of bits in nonce.\n\n    Returns: Tuple of (cipher1, cipher2, cipher3), where cipher1, cipher2 and cipher3 are numpy arrays of numpy arrays containing float64 elements. \n        cipher3 is the result of the operation on cipher1 and cipher2.\n    \n    r\u0002\u0000\u0000\u0000r\u0007\u0000\u0000\u0000g\u0000\u0000\u0000\u0000\u0000\u0000à?)\fr\u0019\u0000\u0000\u0000r\u001a\u0000\u0000\u0000r\u000f\u0000\u0000\u0000Ú\u0004randÚ\u0007randintÚ\u0007reshapeÚ\u0007predictr\u0018\u0000\u0000\u0000r\u001b\u0000\u0000\u0000Ú\u0003lenr\u001f\u0000\u0000\u0000r \u0000\u0000\u0000)\u0010r/\u0000\u0000\u0000r0\u0000\u0000\u0000r\u000e\u0000\u0000\u0000r1\u0000\u0000\u0000r2\u0000\u0000\u0000r3\u0000\u0000\u0000r4\u0000\u0000\u0000r\u000f\u0000\u0000\u0000Ú\u0005nonceÚ\bp1_batchÚ\bp2_batchÚ\u0007cipher1Ú\u0007cipher2Ú\u0007cipher3r$\u0000\u0000\u0000r+\u0000\u0000\u0000s\u0010\u0000\u0000\u0000                r,\u0000\u0000\u0000Ú\u0017generate_cipher_datasetrA\u0000\u0000\u0000>\u0000\u0000\u0000sH\u0001\u0000\u0000\u0000õ2\u0000\u0005\u0007INN4Ñ\u0004\u0018Ô\u0004\u0018Ð\u0004\u0018Ý\f\u000eINN: zÑ\f2Ô\f2EÝ\u000f\u0011y×\u000f Ò\u000f  \u0011 A w°\u001aÑ';Ñ\u000f<Ô\u000f<×\u000fDÒ\u000fDÀZÐQXÑ\u000fYÔ\u000fYHÝ\u000f\u0011y×\u000f Ò\u000f  \u0011 A w°\u001aÑ';Ñ\u000f<Ô\u000f<×\u000fDÒ\u000fDÀZÐQXÑ\u000fYÔ\u000fYHØ\u0017\u001c}} j°(¸HÀeÐ%LÑ\u0017MÔ\u0017MÑ\u0004\u0014GWð\b\u0000\u001f GGsNÑ\u0004\u001bØ\u001e\u001fGGsNÑ\u0004\u001bà\u000e\u0010GÝ\u000b\u0013GÑ\u000b\u001cÔ\u000b\u001cÐ\u0004\u001cÐ\u0004\u001cÐ\u000b\u001cÝ\r\u00123w<<Ñ\r Ô\r ð\u0000\u0002\u0005\u001að\u0000\u0002\u0005\u001a\u0001Ø\f\u0013GGAJ \u0007¨\u0001¤\nÑ\f+Ô\f+\u0001Ø\b\u000f\u000e\u000eqÑ\b\u0019Ô\b\u0019Ð\b\u0019Ð\b\u0019å\u000e\u0010hwÑ\u000e\u001fÔ\u000e\u001fGØ\u000b\u0012GWÐ\u000b$Ð\u0004$r.\u0000\u0000\u0000Ú\b__main__c\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\f\u0000\u0000\u0000\u0000|\u0000|\u0001z\u0000\u0000\u0000S\u0000)\u0001N©\u0000)\u0002Ú\u0001xÚ\u0001ys\u0002\u0000\u0000\u0000  r,\u0000\u0000\u0000ú\b<lambda>rG\u0000\u0000\u0000l\u0000\u0000\u0000s\n\u0000\u0000\u0000\u0000°Q¸\u0011±U\u0000r.\u0000\u0000\u0000é\u0004\u0000\u0000\u0000)\u0004r\t\u0000\u0000\u0000r\n\u0000\u0000\u0000r\u0002\u0000\u0000\u0000r\u000b\u0000\u0000\u0000)\u0001r\u0002\u0000\u0000\u0000)\u0019Ú\u0005numpyr\u0019\u0000\u0000\u0000Ú\u0006typingr\u0003\u0000\u0000\u0000r\u0004\u0000\u0000\u0000Ú\u0017tensorflow.keras.modelsr\u0005\u0000\u0000\u0000Ú\fnumpy.typingr\u0006\u0000\u0000\u0000r\u001a\u0000\u0000\u0000r\u000f\u0000\u0000\u0000Ú\u0006arangeÚ\u0005int64Ú\fstatic_indexÚ\u0007shuffleÚ\u0007float64r\u001d\u0000\u0000\u0000Ú\u0003strÚ\u0007object_r-\u0000\u0000\u0000rA\u0000\u0000\u0000Ú\b__name__Ú\u0002x1Ú\u0002x2rF\u0000\u0000\u0000rD\u0000\u0000\u0000r.\u0000\u0000\u0000r,\u0000\u0000\u0000ú\b<module>rW\u0000\u0000\u0000\u0001\u0000\u0000\u0000s=\u0002\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ø\u0000\"Ð\u0000\"Ð\u0000\"Ð\u0000\"Ð\u0000\"Ð\u0000\"Ð\u0000\"Ð\u0000\"Ø\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ø\u0000 Ð\u0000 Ð\u0000 Ð\u0000 Ð\u0000 Ð\u0000 ð\u0006\u0000\u0001\u0003\t\u000e\u000eqÑ\u0000\u0011Ô\u0000\u0011Ð\u0000\u0011ð\b\u0000\u0010\u0019ry\u0011A R¤XÐ\u000f.Ñ\u000f.Ô\u000f.\fØ\u0000\u0002\t×\u0000\u0011Ò\u0000\u0011,Ñ\u0000\u001fÔ\u0000\u001fÐ\u0000\u001fð\n\u0000\u001c\u001eØ\u001a\u001dØ\u0014\u0015Ø\u0014#ð\u000b,\u0001K\u0001ð\u0000,\u0001K\u0001Ø\u000f\u0017\u0017 \u0012¤\u001aÔ\u0019,¨g°b´jÔ.AÐ\u0018BÀGÈBÌJÔDWÐ\u0018WÔ\u000fXð\u0003,\u0001K\u0001à\u0015\u0018ð\u0005,\u0001K\u0001ð\u0006\u0000\u0015\u0018ð\u0007,\u0001K\u0001ð\b\u0000\u000f\u0012ð\t,\u0001K\u0001ð\n\u0000\u000f\u0012ð\u000b,\u0001K\u0001ð\f\u0000\u0006\u000b72:Ô\u000b\u001e \u0007¨\u0002¬\nÔ 3°W¸R¼ZÔ5HÐ\u000bHÔ\u0005Ið\r,\u0001K\u0001ð\u0000,\u0001K\u0001ð\u0000,\u0001K\u0001ð\u0000,\u0001K\u0001ðn\u0001\u0000\u0011\u0012ð\u0011+\u0001%ð\u0000+\u0001%Ø\r\u0010ð\u0003+\u0001%à\r\u0010ð\u0005+\u0001%ð\u0006\u0000\u0011\u0014ð\u0007+\u0001%ð\b\u0000\u0011\u0018\u0002\nÔ\u0010#ð\t+\u0001%ð\n\u0000\f\u0011ð\u000b+\u0001%ð\f\u0000\u000e\u0016wrzÔ\u0017*¨G°B´JÔ,?Ð\u0016@À'È\"Ì*ÔBUÐ\u0016UÔ\rVð\r+\u0001%ð\u000e\u0000\u0011\u0014ð\u000f+\u0001%ð\u0010\u0000\u000b\u000eð\u0011+\u0001%ð\u0012\u0000\u0005\n'\"*Ô\n\u001dw r¤zÔ\u001f2°G¸B¼JÔ4GÐ\nGÔ\u0004Hð\u0013+\u0001%ð\u0000+\u0001%ð\u0000+\u0001%ð\u0000+\u0001%ðZ\u0001\u0000\u0004\fzÒ\u0003\u0019Ð\u0003\u0019Ø\u0010'Ð\u0010'Ð(:Ð(:¸A¸qÑ\u0010AÔ\u0010AIB\u0002AAAð\u0003\u0000\u0004\u001aÐ\u0003\u0019r.\u0000\u0000\u0000",
      "info": {
        "size": 6010,
        "last_modified": "2025-01-23T15:54:29.019218",
        "mime_type": "application/octet-stream",
        "extension": ".pyc"
      }
    },
    {
      "path": "dataset_generator.py",
      "content": "import numpy as np\nfrom typing import Callable, Tuple\nfrom tensorflow.keras.models import Model\nfrom numpy.typing import NDArray\n\n# Make index selection deterministic as well\nnp.random.seed(0)\n\n# Matrix containing random shuffled numbers between 0 and 99\n# Used to select parts of the input data \nstatic_index = np.arange(0, 2, dtype=np.int64)\nnp.random.shuffle(static_index)\n\n# Generates a static dataset based on an operation function \ndef generate_static_dataset(\n        op_fn: Callable[[NDArray[np.float64], NDArray[np.float64]], NDArray[np.float64]], \n        num_samples: int = 16, \n        batch_size: int = 512, \n        seed: int = 0,\n        mode: str = \"interpolation\"\n) -> Tuple[NDArray[np.object_], NDArray[np.object_], NDArray[np.object_]]:\n    \"\"\"Generates a dataset given an operation. Used to generate static dataset for training.\n\n    Args:\n        op_fn: A function which accepts 2 numpy arrays as arguments and returns a single numpy array as the result.\n        num_samples: Size of the input and output arrays.\n        batch_size: Number of samples in the dataset.\n        seed: random seed\n\n    Returns: Tuple of (X1, X2, y), where X1, X2 and y are numpy arrays of numpy arrays containing float64 elements. \n        y is the result of the operation on X1 and X2.\n    \"\"\"\n    assert callable(op_fn)\n\n    np.random.seed(seed)\n\n    X1_dataset, X2_dataset, y_dataset = [], [], []\n\n    for i in range(batch_size):\n        X = np.random.uniform(low=0.0, high=1.00000001, size=(2, num_samples))\n        if mode == \"extrapolation\":\n            X *= 0.1\n        a, b = X  # Unpack the two arrays\n\n        zero_fraction = 0.2\n        num_zeros = int(num_samples * zero_fraction)\n        \n        # Randomly choose indices to set to zero\n        indices_to_zero = np.random.choice(num_samples, num_zeros, replace=False)\n        a[indices_to_zero] = 0\n        b[indices_to_zero] = 0\n\n        Y = op_fn(a, b)  # Apply the operation\n\n        X1_dataset.append(a)\n        X2_dataset.append(b)\n        y_dataset.append(Y)\n\n    return np.array(X1_dataset), np.array(X2_dataset), np.array(y_dataset)\n\n\ndef generate_cipher_dataset(\n    p1_bits: int, \n    p2_bits: int, \n    batch_size: int, \n    public_arr: NDArray[np.object_], \n    alice: Model, \n    task_fn: Callable[[NDArray[np.float64], NDArray[np.float64]], NDArray[np.float64]], \n    nonce_bits: int,\n    seed: int = 0,\n)-> Tuple[NDArray[np.object_], NDArray[np.object_], NDArray[np.object_]]:\n    \"\"\"Generates a dataset with ciphertext given an operation. Used to generate a dataset of ciphertexts encrypted by Alice.\n\n    Args:\n        p1_bits: Number of bits in plaintext 1.\n        p2_bits: Number of bits in plaintext 2. \n        batch_size: Number of samples in the dataset. \n        public_arr: Public key, an numpy array of numpy arrays containing float64 elements. \n        alice: Alice Model.\n        task_fn: A function which accepts 2 numpy arrays as arguments and returns a single numpy array as the result. \n        nonce_bits: Number of bits in nonce.\n\n    Returns: Tuple of (cipher1, cipher2, cipher3), where cipher1, cipher2 and cipher3 are numpy arrays of numpy arrays containing float64 elements. \n        cipher3 is the result of the operation on cipher1 and cipher2.\n    \n    \"\"\"\n    np.random.seed(seed)\n    nonce = np.random.rand(batch_size, nonce_bits)\n    p1_batch = np.random.randint(0, 2, p1_bits * batch_size).reshape(batch_size, p1_bits)\n    p2_batch = np.random.randint(0, 2, p2_bits * batch_size).reshape(batch_size, p2_bits)\n    cipher1, cipher2 = alice.predict([public_arr, p1_batch, p2_batch, nonce])\n\n    # Alice weights are at initialization, so dropout layer will give 0.5\n    # Replace 0.5 with 0 to make HO model train on accurate data\n    cipher1[cipher1 == 0.5] = 0\n    cipher2[cipher2 == 0.5] = 0\n\n    cipher3 = []\n    assert callable(task_fn)\n    for i in range(len(cipher1)):\n        Y = task_fn(cipher1[i], cipher2[i])\n        cipher3.append(Y)\n\n    cipher3 = np.array(cipher3)\n    return cipher1, cipher2, cipher3\n\nif __name__ == \"__main__\":\n    x1, x2, y = generate_static_dataset(lambda x, y: x + y, 4, 4)",
      "info": {
        "size": 4116,
        "last_modified": "2025-01-23T15:54:29.020592",
        "mime_type": "text/x-python",
        "extension": ".py"
      }
    },
    {
      "path": "accuracy.py",
      "content": "from tensorflow.keras.models import Model\nimport numpy as np\nfrom numpy.typing import NDArray\n\ndef decryption_accurancy(model: Model, cipher: NDArray[np.object_], key_arr: NDArray[np.object_], nonce: int, p_batch: NDArray[np.object_]) -> np.float64:\n    \"\"\"Calculates the decryption accuracy of the model.\n    \n    Args:\n        model: Model.\n        cipher: Ciphertext, a numpy array of numpy arrays consisting of float32 elements.\n        key_arr: Key array, a numpy array of numpy arrays consisting of float64 elements.\n        nonce: Nonce.\n        p_batch: Plaintext batch, a numpy array of numpy arrays consisting of float32 elements.\n\n    Returns:\n        The decryption accuracy of the model.\n    \"\"\"\n    # Calculate Bob's decryption accuracy\n    decrypted = model.predict([cipher, key_arr, nonce])\n    decrypted_bits = np.round(decrypted).astype(int)\n    correct_bits = np.sum(decrypted_bits == (p_batch))\n    total_bits = np.prod(decrypted_bits.shape)\n    return np.round(correct_bits / total_bits * 100, 2)\n\ndef HO_accuracy(cipher: NDArray[np.object_], computed_cipher: NDArray[np.object_]):\n    \"\"\"Calculates the accuracy of the HO model.\n\n    Args:\n        cipher: Ciphertext, a numpy array of numpy arrays consisting of float32 elements.\n        computed_cipher: Computed ciphertext, a numpy array of numpy arrays consisting of float32 elements.\n    \n    Returns:\n        The accuracy of the HO model.\n    \"\"\"\n    tolerance = 1e-3\n    correct_elements = np.sum(np.abs(computed_cipher - cipher) <= tolerance)\n    total_elements = np.prod(cipher.shape)\n    return (correct_elements / total_elements) * 100\n     ",
      "info": {
        "size": 1623,
        "last_modified": "2025-01-23T15:54:29.021816",
        "mime_type": "text/x-python",
        "extension": ".py"
      }
    },
    {
      "path": "analyse_cipher.py",
      "content": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom typing import List\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom numpy.typing import NDArray\n\ndef probabilistic_encryption_analysis(rate: float, curve: str, batch_size: int) -> NDArray[np.float32]:\n    \"\"\"Calculates the standard deviation of five ciphertexts given a dropout rate and curve.\n    Used to calculate the standard deviation of the ciphertexts to evaluate the probabilistic encryption.\n    \n    Args:\n        rate: Dropout rate.\n        curve: Elliptic curve.\n        batch_size: Number of samples in the dataset.\n    \n    Returns:\n        std: Standard deviation of the ciphertexts.\n    \"\"\"\n    C1 = np.load(f\"ciphertext/rate-{rate}-curve-{curve}-batch-{batch_size}-1.npy\")\n    C2 = np.load(f\"ciphertext/rate-{rate}-curve-{curve}-batch-{batch_size}-2.npy\")\n    C3 = np.load(f\"ciphertext/rate-{rate}-curve-{curve}-batch-{batch_size}-3.npy\")\n    C4 = np.load(f\"ciphertext/rate-{rate}-curve-{curve}-batch-{batch_size}-4.npy\")\n    C5 = np.load(f\"ciphertext/rate-{rate}-curve-{curve}-batch-{batch_size}-5.npy\")\n    stacked_arrays = np.stack((C1, C2, C3, C4, C5))\n    std = np.std(stacked_arrays, axis=0)\n    return std[0]\n\ndef plot_std_and_mean(dropout_rates: List[float], curve: str, batch_size: int):\n    \"\"\"Plots the mean and standard deviation of the standard deviation of five ciphertexts for a given curve. \n    Saves the plot as a pdf file.\n\n    Args:\n        dropout_rates: List of dropout rates.\n        curve: Elliptic curve.\n        batch_size: Number of samples in the dataset.\n    \"\"\"\n    sns.set_theme(style=\"darkgrid\")\n\n    data = []\n    for rate in dropout_rates:\n        std = probabilistic_encryption_analysis(rate, curve, batch_size)\n        for s in std:\n            data.append({'value': s, 'type': 'Standard Deviation', 'dropout_rate': rate})\n\n    df = pd.DataFrame(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.rc('font', size=12)  \n    plt.rc('axes', labelsize=30) \n    plt.rc('xtick', labelsize=25)  \n    plt.rc('ytick', labelsize=25)   \n    plt.ylim(0, 0.3)\n    sns.lineplot(data=df, x='dropout_rate', y='value', hue='type', style='type', markers=True, dashes=False, errorbar='sd', legend=False)\n    plt.xlabel('Dropout Rate')\n    plt.ylabel('Standard Deviation')\n    plt.grid(True)\n    plt.savefig(f\"figures/{curve}-std.pdf\", bbox_inches='tight')\n\nif __name__ == \"__main__\":\n    rates = [0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n    curve = \"secp224r1\"\n    batch_size = 1\n    plot_std_and_mean(rates, curve, batch_size)",
      "info": {
        "size": 2562,
        "last_modified": "2025-01-23T15:54:29.022998",
        "mime_type": "text/x-python",
        "extension": ".py"
      }
    }
  ]
}